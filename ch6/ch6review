1.  What do we mean by "Programming is understanding"?

It means that you cannot code, or debug an application until you can comprehend exactly how that application is supposed to work.  The process of coding and debugging is the process of learning and understanding, and the finished product is born of this.


2.  The chapter details the creation of a calculator program.  Write a short analysis of
what the calculator should be able to do.

The calculator should be able to parse a regular mathematical expression into symbols and numbers.
The calculator should be able to understand the symbols properly as ways to manipulate the numbers in the expression.
The calculator should be able to return the correct evaluation of the expression.
The calculator should be able to reasonably handle erroneous inputs.


3.  How do you break a problem up into smaller manageable parts?

Take the original problem, and divide the solution into discrete steps.  Then take each of those steps, and code a working solution that does just that step.  Once each individual step in the solution is coded, tested, and functional, assemble the steps into the solution entire.


4.  Why is creating a small, limited version of a program a good idea?

Because it is easier to discover and fix logical errors in the approach to the problem when using a small, limited version.  Once the theory has been proven sound by the limited version, a more complete version can be made with more confidence.


5.  Why is feature creep a bad idea?

It may seem awesome to add all kinds of features, but adding extra features before the basic features are fully implemented can slow or entirely impede development.  It's better to fully complete the basic features first before even considering extra features, one reason being that often the difficulty of coding an "extra feature" isn't truly known until the regular parts are completed.


6.  What are the three main phases of software development?

Analysis:  Figure out what exactly needs to be done and describe it in detail.
Design:  According to the needs, create a structure that can handle the needs, using outside libraries if necessary.
Implementation:  Write the code that makes it happen.


7.  What is a "use case"?

It is...a time when the program will be used.  Envisioning under what exact circumstances a program will be used, and designing it to be efficient under those circumstances.


8.  What is the purpose of testing?

To make sure that the code is sound.  To see if it works in the real world environment for which it is designed.  To give it edge case inputs in order to make sure that the algorithms are robust.


9.  According to the outline in the chapter, describe the difference between a Term, an Expression, a Number, and a Primary.

Number:  A token that represents a numeric value (as opposed to an operator).
Primary:  A Number, *or* an expression in parentheses that evaluates to a Number.
Term:  A Primary, or itself operating on a Primary using a first priority operator (* /)
Expression:  A Term, or itself operating on a Term using a second priority operator (+ -)


10.  In the chapter, an input was broken down into its component Terms, Expressions, Primarys, and Numbers.  Do this for (17+4)(5-1).

Term: Primary: Expression: 17+4 * Primary: Expression: 5-1.


11.  Why does the program not have a function called number()?

Because the defintion of a number contains nothing else other than itself.  It is an "elemental" token.


12.  What is a token?

A token is the smallest symbolic piece of information that is parsed.


13.  What is a grammar?  A grammar rule?

A grammar is a framework that dictates what are legal and illegal constructions of symbols.  It denotes meaning for each symbol, and rules for operating on the symbols.


14.  What is a class?  What do we use classes for?

A class is a structure that includes its own routines for manipulating its data.  It is a bundle of data and code.  We use classes to define and easily work with custom data types.


15.  How can we provide a default value for a member of a class?

There is a syntax for a constructor, which is the code that is executed whenever a new instance of the class is made.  This constructor can be told what default values a member is assigned.


16.  In the expression function, why is the default for the switch-statement to "put back" the token?

Because expression is the "topmost" layer of the grammar, a set of tokens that doesn't fit expression are then evaluated by term or primary.  Term and primary will need to know the symbol that expression could not evaluate.  So it gets put back.


17.  What is "look-ahead"?

Look-ahead is when a parser continues to parse past the intended end of an expression.


18.  What does putback() do and why is it useful?

Reading a token from a stream removes the token from that stream, like taking a Pringles chip from a tube of chips.  A token has to be read before a function can decide if it is a valid symbol, and if the symbol is not valid then another function will probably need to read it.  The putback function puts the chip back in the tube for someone else to eat.


19.  Why is the remainder (modulus) operation, %, difficult to implement in the term()?

The modulus function does not work with numbers that have decimal portions; it only works with integers.  The get() function in the token stream reads all numbers as doubles because it's much easier.  In order for modulus to work, the token stream would need to differentiate between an integer and a floating point value, and modulus would have to check first to see if both of the values it works with are integers.  It's a surprising pain in the ass, so we skipped it for now.


20.  What do we use the two data members of the Token class for?

kind:  Denotes what kind of Token it is.  Operators are represented by their literal character ('+' for +, '-' for -, etc.), while numbers all have a kind of '8'.
value:  If the token is of kind '8', the value will be what the number is.  If the kind is an operator, there is no value.


21.  Why do we (sometimes) split a class's members into private and public members?

If all programmers were polite and perfect, all the code of a class could be public and there would be no problems.  But it's not like that, hardly ever.  Splitting the members into private and public ensures that no one using an instance of the class can access what is in private.  This is how a coder can cut down on possible erroneous usage.


22.  What happens in the Token_stream class when there is a token in the buffer and the get() function is called?

The get() function will return the token from the buffer and then empty the buffer.


23.  Why were the ';' and 'q' characters added to the switch-statement in the get() function of the Token_stream class?

Those characters have special meaning to the rest of the program, not including the part that evaluates expressions.  They don't belong in an expression, but they need to be saved, so get makes sure not to throw an error on them.


24.  When should we start testing our program?

As soon as we have made a piece that can be executed.  I am big on testing each little piece as soon as it is completely coded for the first time.


25.  What is a "user-defined type"?  Why would we want one?

A user-defined type is a type like int or double, only we define what data is in it and how it is represented.  We would want one because it is a convenient way to organize data in our programs.


26.  What is the interface to a C++ "user-defined type"?

Pretty sure it's typedef...?


27.  Why do we want to rely on libraries of code?

Because part of the whole point of writing code is so that it doesn't have to be written again.  A library of code is the way that specialists in separate areas of programming can make their skills and knowledge available to other programmers.  It's the spirit of cooperation and building something bigger than yourself.  Also, for us, reinventing the wheel is an unnecessary bitch.  Just order the tires from Firestone, no need to make your own if you want to build a car.
